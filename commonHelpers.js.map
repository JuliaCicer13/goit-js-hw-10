{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["\nimport flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\nlet intervalId = null;\nconst startButton = document.querySelector('[data-start]');\nconst dateTimePicker = document.getElementById('datetime-picker');\nconst clockFace = document.getElementById('timer');\nclockFace.textContent = '00:00:00:00';\n\n\nlet initTime = 0;\n\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    const currentDate = new Date();\n    if (selectedDate < currentDate) {\n      iziToast.error({ message: 'Please choose a date in the future' });\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n      initTime = selectedDate.getTime(); // Update initTime with selected date\n    }\n  },\n};\n\n\n\nflatpickr(dateTimePicker, options);\n\n\n\n\nstartButton.addEventListener('click', function () {\n\n  if (!dateTimePicker.value) {\n \n    iziToast.error({ message: 'Please choose a date' });\n    return;\n  }\n\n \n  intervalId = setInterval(() => {\n    const currentTime = Date.now();\n    const diff = initTime - currentTime;\n    if (diff <= 0) {\n      clearInterval(intervalId);\n      startButton.disabled = false; \n      return;\n    }\n    const time = formatTime(diff);\n    clockFace.textContent = time;\n  }, 1000);\n});\n\nconst formatTime = milliseconds => {\n  const days = Math.floor(milliseconds / (1000 * 60 * 60 * 24));\n  const hours = Math.floor((milliseconds % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n  const minutes = Math.floor((milliseconds % (1000 * 60 * 60)) / (1000 * 60));\n  const seconds = Math.floor((milliseconds % (1000 * 60)) / 1000);\n  return [\n    days.toString().padStart(2, '0'),\n    hours.toString().padStart(2, '0'),\n    minutes.toString().padStart(2, '0'),\n    seconds.toString().padStart(2, '0'),\n  ].join(':');\n}"],"names":["intervalId","startButton","dateTimePicker","clockFace","initTime","options","selectedDates","selectedDate","iziToast","flatpickr","currentTime","diff","time","formatTime","milliseconds","days","hours","minutes","seconds"],"mappings":"2GAOA,IAAIA,EAAa,KACjB,MAAMC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAY,SAAS,eAAe,OAAO,EACjDA,EAAU,YAAc,cAGxB,IAAIC,EAAW,EAGf,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,CAAC,EAEhCC,EADgB,IAAI,MAEtBC,EAAS,MAAM,CAAE,QAAS,oCAAsC,CAAA,EAChEP,EAAY,SAAW,KAEvBA,EAAY,SAAW,GACvBG,EAAWG,EAAa,UAE3B,CACH,EAIAE,EAAUP,EAAgBG,CAAO,EAKjCJ,EAAY,iBAAiB,QAAS,UAAY,CAEhD,GAAI,CAACC,EAAe,MAAO,CAEzBM,EAAS,MAAM,CAAE,QAAS,sBAAwB,CAAA,EAClD,MACD,CAGDR,EAAa,YAAY,IAAM,CAC7B,MAAMU,EAAc,KAAK,MACnBC,EAAOP,EAAWM,EACxB,GAAIC,GAAQ,EAAG,CACb,cAAcX,CAAU,EACxBC,EAAY,SAAW,GACvB,MACD,CACD,MAAMW,EAAOC,EAAWF,CAAI,EAC5BR,EAAU,YAAcS,CACzB,EAAE,GAAI,CACT,CAAC,EAED,MAAMC,EAAaC,GAAgB,CACjC,MAAMC,EAAO,KAAK,MAAMD,EAAgB,KAAoB,EACtDE,EAAQ,KAAK,MAAOF,GAAgB,IAAO,GAAK,GAAK,KAAQ,IAAO,GAAK,GAAG,EAC5EG,EAAU,KAAK,MAAOH,GAAgB,IAAO,GAAK,KAAQ,IAAO,GAAG,EACpEI,EAAU,KAAK,MAAOJ,GAAgB,IAAO,IAAO,GAAI,EAC9D,MAAO,CACLC,EAAK,SAAU,EAAC,SAAS,EAAG,GAAG,EAC/BC,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,EAChCC,EAAQ,SAAU,EAAC,SAAS,EAAG,GAAG,EAClCC,EAAQ,SAAU,EAAC,SAAS,EAAG,GAAG,CACtC,EAAI,KAAK,GAAG,CACZ"}